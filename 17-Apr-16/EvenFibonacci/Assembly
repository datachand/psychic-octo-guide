.LC0:
        .string "%d"
.LC1:
        .string "%lld"
.LC2:
        .string "%lld\n"
main:
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $48, %rsp
        movl    %edi, -36(%rbp)
        movq    %rsi, -48(%rbp)
        leaq    -20(%rbp), %rax
        movq    %rax, %rsi
        movl    $.LC0, %edi
        movl    $0, %eax
        call    scanf
        movl    -20(%rbp), %eax
        cltq
        salq    $3, %rax
        movq    %rax, %rdi
        call    malloc
        movq    %rax, -16(%rbp)
        movl    $0, -4(%rbp)
.L3:
        movl    -20(%rbp), %eax
        cmpl    %eax, -4(%rbp)
        jge     .L2
        movl    -4(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    %rax, %rsi
        movl    $.LC1, %edi
        movl    $0, %eax
        call    scanf
        addl    $1, -4(%rbp)
        jmp     .L3
.L2:
        movl    $0, -8(%rbp)
.L5:
        movl    -20(%rbp), %eax
        cmpl    %eax, -8(%rbp)
        jge     .L4
        movl    -8(%rbp), %eax
        cltq
        leaq    0(,%rax,8), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    (%rax), %rax
        movq    %rax, %rdi
        call    EvenFibonacci(long long)
        movq    %rax, %rsi
        movl    $.LC2, %edi
        movl    $0, %eax
        call    printf
        addl    $1, -8(%rbp)
        jmp     .L5
.L4:
        movl    $0, %eax
        leave
        ret
EvenFibonacci(long long):
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -56(%rbp)
        movq    $0, -8(%rbp)
        movq    $1, -16(%rbp)
        movq    $0, -40(%rbp)
        movq    $0, -24(%rbp)
        movl    $2, -28(%rbp)
.L11:
        movl    -28(%rbp), %eax
        cltq
        cmpq    -56(%rbp), %rax
        jge     .L8
        movq    -8(%rbp), %rdx
        movq    -16(%rbp), %rax
        addq    %rdx, %rax
        movq    %rax, -40(%rbp)
        movq    -40(%rbp), %rax
        cmpq    -56(%rbp), %rax
        jg      .L13
        movq    -40(%rbp), %rax
        andl    $1, %eax
        testq   %rax, %rax
        jne     .L10
        movq    -40(%rbp), %rax
        addq    %rax, -24(%rbp)
.L10:
        movq    -16(%rbp), %rax
        movq    %rax, -8(%rbp)
        movq    -40(%rbp), %rax
        movq    %rax, -16(%rbp)
        addl    $1, -28(%rbp)
        jmp     .L11
.L13:
        nop
.L8:
        movq    -24(%rbp), %rax
        popq    %rbp
        ret
